//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.io.*;

class GFG{
	public static void main(String[] args){
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t > 0){
			int n = sc.nextInt();
			int[][] a = new int[n][n];
			for(int i = 0; i < n; i++)
				for(int j = 0; j < n; j++)
					a[i][j] = sc.nextInt();
			Solution T = new Solution();
			ArrayList<Integer> arr= T.mergeKArrays(a, n);
			for(int i = 0; i < n*n ; i++)
			    System.out.print(arr.get(i)+" ");
		    System.out.println();
		    
		    t--;
		}
	}
}


// } Driver Code Ends


//User function Template for Java


class Solution
{
    static class Triplet implements Comparable<Triplet>{
        int ele;
        int row;
        int col;
        Triplet(int ele, int row, int col){
            this.ele=ele;
            this.row=row;
            this.col=col;
        }
        public int compareTo(Triplet obj){
            return this.ele - obj.ele;
        }
    }
    //Function to merge k sorted arrays.
    public static ArrayList<Integer> mergeKArrays(int[][] arr,int k) 
    {
        // Write your code here.
        PriorityQueue<Triplet> pq= new PriorityQueue<Triplet>();
        ArrayList<Integer> ans = new ArrayList<Integer>();
        
        for(int i=0; i < k ; i++){ //row
            pq.add(new Triplet(arr[i][0], i, 0));
            
        }
        
        //while pq is not empty
        while(pq.size() > 0){
            Triplet curr= pq.remove();
            int row = curr.row;
            int col = curr.row;
            int ele = curr.ele;
            
            ans.add(ele);
            
            col++;
            
            if(col >= arr[row].length)
                continue;
            
            pq.add(new Triplet(arr[row][col],row, col));
        }
        return ans;
    }
}
